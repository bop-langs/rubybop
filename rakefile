build_dir = 'build'
ruby_dir = 'ruby'
ruby_cp_dir = "#{build_dir}/ruby"
bop_dir = 'bop'
bop_build_dir = "#{build_dir}/bop"

task :default => :ruby
test_dir = ['add', 'sleep','str/BOP_strcmp', 'str/BOP_string', 'str/strsub', 'str/strsub2']
task :ruby => :bop do
  #build ruby
  FileUtils.cp_r ruby_dir, ruby_cp_dir, :remove_destination => true #only copy if needed
  dirs = Dir["#{bop_dir}/**/*.h"]
  puts "copying ruby directory"
  dirs.each do |file|
    cp = file.to_s.sub bop_dir, bop_build_dir
    if uptodate?  file, [cp] then
      FileUtils.cp_r file, cp, :remove_destination => true
    end
  end
  change = "./search.rb #{ruby_cp_dir}"
  sh change
  cd ruby_cp_dir do
    if (!File.exists?("Makefile")) then
      sh 'autoconf'
      sh './configure --disable-install-doc'
    end
    sh 'make'
  end
end

task :bop do
  #build bop
  cd "bop" do
    sh 'make'
  end
end

task :ruby_test => :ruby do
  cd ruby_cp_dir do
    sh 'make test' do |ok, res|
      if ! ok then
        fail "Ruby tests failed with exit code = #{res.exitstatus}"
      end
    end
  end
end

task :bop_test => :bop do
  test_dir.each do |dir|
    cd 'tests/' + dir do
      sh 'rake; rake run' do |ok, res|
        if ! ok then
          fail "cbop  test failure code #{res.exitstatus}"
        end
      end
    end
  end
end

task :test do
  Rake::Task[:bop_test].invoke
  Rake::Task[:ruby_test].invoke
end

task :nuke do
	sh 'git clean -xfd'
end
task :clean do
  sh "rm -rf #{build_dir}" #ruby clean
  test_dir.each do |dir|
    cd "tests/" + dir do
      sh 'rake clean'
    end
  end
end
task :again do
	Rake::Task[:clean].invoke
	Rake::Task[:default].invoke
end
